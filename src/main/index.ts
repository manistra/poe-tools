import {
  app,
  BrowserWindow,
  Menu,
  ipcMain,
  shell,
  globalShortcut,
  screen,
} from "electron";
import path from "path";

import { initializeHandlers, initializeStorage } from "./setup/initialize";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

let mainWindow: BrowserWindow;
let overlayWindow: BrowserWindow | null = null;

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 900,
    width: 1400,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
      webSecurity: true,
    },
    frame: true,
    autoHideMenuBar: true,
    show: true,
    icon: path.join(__dirname, "../renderer/assets/icon.ico"),
  });

  // Set Content Security Policy to allow WebSocket connections
  mainWindow.webContents.session.webRequest.onHeadersReceived(
    (details, callback) => {
      callback({
        responseHeaders: {
          ...details.responseHeaders,
          "Content-Security-Policy": [
            "default-src 'self' 'unsafe-inline' data:; connect-src 'self' wss://www.pathofexile.com https://www.pathofexile.com; script-src 'self' 'unsafe-eval' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https://web.poecdn.com;",
          ],
        },
      });
    }
  );

  // Create context menu for right-click inspect
  const contextMenu = Menu.buildFromTemplate([
    {
      label: "Inspect Element",
      click: () => {
        mainWindow.webContents.openDevTools();
      },
    },
    {
      label: "Toggle DevTools",
      click: () => {
        mainWindow.webContents.toggleDevTools();
      },
    },
  ]);

  // Set up right-click context menu
  mainWindow.webContents.on("context-menu", (event, params) => {
    contextMenu.popup({
      window: mainWindow,
      x: params.x,
      y: params.y,
    });
  });

  Menu.setApplicationMenu(null);

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Show window when ready to prevent visual flash
  mainWindow.once("ready-to-show", () => {
    mainWindow.show();
  });

  // Handle window closed
  mainWindow.on("closed", () => {
    mainWindow = null as any;
  });

  // Handle web contents errors
  mainWindow.webContents.on(
    "did-fail-load",
    (event, errorCode, errorDescription, validatedURL) => {
      console.error(
        "Failed to load:",
        errorCode,
        errorDescription,
        validatedURL
      );
    }
  );

  // Open the DevTools.
  // Comment this out for production
  if (process.env.NODE_ENV === "development")
    mainWindow.webContents.openDevTools();

  // Temporary: Always open DevTools for debugging
  // mainWindow.webContents.openDevTools();
};

const createOverlayWindow = (config: {
  width: string;
  height: string;
  x: string;
  y: string;
  screenIndex: number;
}): void => {
  // Close existing overlay if it exists
  if (overlayWindow) {
    overlayWindow.close();
    overlayWindow = null;
  }

  const displays = screen.getAllDisplays();
  const targetDisplay = displays[config.screenIndex] || displays[0];

  overlayWindow = new BrowserWindow({
    width: parseInt(config.width),
    height: parseInt(config.height),
    x: parseInt(config.x) + (targetDisplay?.bounds.x || 0),
    y: parseInt(config.y) + (targetDisplay?.bounds.y || 0),
    frame: false,
    transparent: true,
    alwaysOnTop: true,
    resizable: false,
    hasShadow: false,
    skipTaskbar: true,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
      webSecurity: false,
    },
  });

  // Load the grid overlay HTML
  overlayWindow.loadFile(path.join(__dirname, "../renderer/grid-overlay.html"));

  // Set a title for easier identification
  overlayWindow.setTitle("Grid Overlay");

  // Make the overlay ignore mouse events (click-through)
  overlayWindow.setIgnoreMouseEvents(true);

  // Handle overlay window closed
  overlayWindow.on("closed", () => {
    overlayWindow = null;
  });
};

const hideOverlayWindow = (): void => {
  if (overlayWindow) {
    overlayWindow.close();
    overlayWindow = null;
  }
};

const updateOverlayHighlight = (x: number, y: number): void => {
  if (overlayWindow) {
    overlayWindow.webContents.send("update-highlight", { x, y });
  }
};

// Export function to get overlay window reference
export const getOverlayWindow = (): BrowserWindow | null => {
  return overlayWindow;
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
  createWindow();

  initializeStorage();
  initializeHandlers();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// Clean up global shortcuts when the app is about to quit
app.on("will-quit", () => {
  globalShortcut.unregisterAll();
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

// Add this with your other ipcMain handlers
ipcMain.handle("shell-open-external", async (_, url) => {
  if (
    typeof url === "string" &&
    (url.startsWith("https://") || url.startsWith("http://"))
  ) {
    await shell.openExternal(url);
    return true;
  }
  return false;
});

// Screen API handlers
ipcMain.handle("get-displays", async () => {
  const displays = screen.getAllDisplays();
  return displays.map((display, index) => ({
    id: index,
    label: display.label || `Display ${index + 1}`,
    bounds: display.bounds,
  }));
});

// Grid overlay handlers
ipcMain.handle("show-grid-overlay", async (_, config) => {
  createOverlayWindow(config);
  return true;
});

ipcMain.handle("hide-grid-overlay", async () => {
  hideOverlayWindow();
  return true;
});

ipcMain.handle("update-grid-highlight", async (_, { x, y }) => {
  updateOverlayHighlight(x, y);
  return true;
});
